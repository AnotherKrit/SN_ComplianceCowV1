<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1507800_complian.ComplianceCowIndicatorHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>ComplianceCowIndicatorHelper</name>
        <script><![CDATA[var ComplianceCowIndicatorHelper = Class.create();

//Process indicators which has both item and profile
ComplianceCowIndicatorHelper.prototype = {
   initialize: function(constScript) {
        this.ccConstScript = constScript; //new ComplianceCowConstants();
    },

	handleAssessment: function(assessment_rec, assessment_id){
		if (assessment_rec == null){
			gs.info("Could not retrieve the lastest assessment record for the assement id: " + assessment_id);
			//send email
			return false;
		}
		if (!this.constScript.COMPLIANCECOW_API.SUCCESS_RESPONSE_STATUS.includes(
								assessment_rec.response_status_code)){
			gs.info("Latest ComplianceCow assessment for id " + assessment_rec.assessment_id + " has failed.\nReason: " + assessment_rec.response_error_message);
			//send email with assessment_rec.response_error_message
			return false;
		}
		return true;
	},

	getAllSupportingEvidences: function(supportingEvidences){
		var supp_evidences = [];
		if (!gs.nil(supportingEvidences) && supportingEvidences.trim().length> 0)
			supp_evidences = supportingEvidences.split(",");

		return supp_evidences;
	},

    getEvidenceNamesForControlObj: function(control_obj, indicator_template_id) {
		
        //var ctl_obj = control.content;
        var evidence = {};

        if (control_obj != null && control_obj.active){
            var gr_ctl_mapping = new GlideRecord(this.ccConstScript.TABLES.EVIDENCE_CONTROL_MAPPING); 
            gr_ctl_mapping.addQuery('indicatortempateid', indicator_template_id);  
			gr_ctl_mapping.addQuery('sncontrolobjective', control_obj.sys_id);  
            gr_ctl_mapping.query();
            if (gr_ctl_mapping.next()){
                evidence =  {
                    primaryevidence : gr_ctl_mapping.primaryevidencename,
                    supportingevidences : this.getAllSupportingEvidences(gr_ctl_mapping.supportingevidences)
                };
            }
        }
		return evidence;
    },

    getEvidenceNamesForControlReq: function(control_requirement, indicator_template_id) {
        
        var evidence = {};
        var gr_ctl_mapping = new GlideRecord(this.ccConstScript.TABLES.EVIDENCE_CTL_REQ_MAPPING); 
        gr_ctl_mapping.addQuery('indicatortempateid', indicator_template_id);  
        gr_ctl_mapping.addQuery('sncontrolrequirement', ctl_req.sys_id);  
        gr_ctl_mapping.query();
        if (gr_ctl_mapping.next()){
            evidence = {
                primaryevidence : gr_ctl_mapping.primaryevidencename,
                supportingevidences : this.getAllSupportingEvidences(gr_ctl_mapping.supportingevidences)
            };
        }
		return evidence;
    },
	

    getLatestAssessmentRunRecord: function(assessment_id){
        var gr_record = new GlideAggregate(this.ccConstScript.TABLES.ASSESSMENT_STATUS);
        var max_ass_time = null;

        gr_record.addQuery('assessment_id', assessment_id);
        gr_record.addAggregate('MAX', 'started_time');
		gr_record.groupBy('assessment_id');
        gr_record.query();
        if (gr_record.next())
        {
            max_ass_time = gr_record.getAggregate('MAX', 'started_time');
            var gr = new GlideRecord(this.ccConstScript.TABLES.ASSESSMENT_STATUS);
            gr.addQuery('assessment_id', assessment_id);
            gr.addQuery('started_time', max_ass_time);
			gr.query();
            if (gr.next())
                return gr;
            else
                return null;
        }
        else{
            return null;
        }    
    },

	//retrieves latest run id for the evidence for the given assessment from Evidence Data table
    getLatestEvidenceRunId: function(evidence_name, assessment_id){
        var gaEvidence = new GlideAggregate(this.ccConstScript.TABLES.EVIDENCE_DATA);
        var max_evidence_time = null;
        gaEvidence.addQuery('evidencefilename', evidence_name);
        gaEvidence.addQuery('assessmentid', assessment_id);
        gaEvidence.addAggregate('MAX', 'assessmenttime');
		gaEvidence.groupBy('assessmentid');
		gaEvidence.groupBy('evidencefilename');
        gaEvidence.query();
        if (gaEvidence.next())
            max_evidence_time = gaEvidence.getAggregate('MAX', 'assessmenttime');
			if (max_evidence_time != null)
			{
				var gr_record = new GlideRecord(this.ccConstScript.TABLES.EVIDENCE_DATA);
				gr_record.addQuery('assessmentid', assessment_id);
				gr_record.addQuery('evidencefilename', evidence_name);
				gr_record.addQuery('assessmenttime', max_evidence_time);
				gr_record.setLimit(1);
				gr_record.query();

				if (gr_record.next())
					return gr_record.assessmentrunid;
				else
					return null;			
			}
        return null;
    },

	isEvidenceForLatestRunPresent(assessment_id, assessment_run_id, evidence_name){
		//retrieves record from 
		var latest_assessment_run_id = this.getLatestEvidenceRunId(assessment_id, evidence_name);
		//no record in Assessment Status table or no record for evidence in Evidence Data table
		if (latest_assessment_run_id == null)
		{
			gs.info("Could not retrieve the lastest assessment run id for for the Assessment Id: " + assessment_id + ", Assessment Run Id: + " + assessment_run_id + ", Evidence File Name: " + evidence_name);
			//Do some action..send email
			return false;
		}
		//If no record for evidence is found in Evidence Data table for the latest run
		if (assessment_run_id != latest_assessment_run_id) {
			gs.info("For the Assessment Id: " + assessment_id + ", latest Assessment Run Id is : + " + assessment_run_id + ", but latest Evidence File Name: " + evidence_name + " is present for Assessment Run Id: " + latest_assessment_run_id);
			//Do some action..send email

			return false;
		}
		return true;
	},

	getLatestComplianceRecordForCriterias: function(assessment_id, assessment_run_id, evidence, criterias, encoded_query){
        var gr_record = new GlideRecord(this.ccConstScript.TABLES.EVIDENCE_DATA);
        gr_record.addQuery('assessmentid', assessment_id);
        gr_record.addQuery('evidencefilename', evidence);
        gr_record.addQuery('assessmentrunid', assessment_run_id);
        //check if a combination of addQuery and encoded Query is possible
		if (criterias.length > 0)
		{
			for (var i=0; i < criterias.length; i++)
				gr_record.addQuery(criterias[i].name, criterias[i].operator, criterias[1].value);
		}
        if (!gs.nil(encoded_query) && encoded_query.length > 0){
            gr_record.addEncodedQuery(encoded_query);
        }

        gr_record.query();

        if (gr_record.next())
            return gr_record;
        else
            return null;
    },

	getCustomComplianceLogicForControlObj: function(control_obj) {
		var gr_ctl_mapping = new GlideRecord(this.ccConstScript.TABLES.EVIDENCE_CONTROL_MAPPING); 
		gr_ctl_mapping.addQuery('indicatortempateid', indicator_template_id);  
		gr_ctl_mapping.addQuery('sncontrolobjective', control_obj.sys_id);  
		gr_ctl_mapping.query();
		if (gr_ctl_mapping.next()){
			if (!gs.nil(gr_ctl_mapping.customcompliancelogic))
			{
				logic = gr_ctl_mapping.customcompliancelogic.trim();
				return logic;
			}
		}
		return null;
	},

	getCustomComplianceLogicForControlReq:function(control_req)
	{
		var gr_ctl_mapping = new GlideRecord(this.ccConstScript.TABLES.EVIDENCE_CONTROLREQ_MAPPING); 
		gr_ctl_mapping.addQuery('indicatortempateid', indicator_template_id);  
		gr_ctl_mapping.addQuery('sncontrolrequirement', control_req.sys_id);  
		gr_ctl_mapping.query();
		if (gr_ctl_mapping.next()){
			if (!gs.nil(gr_ctl_mapping.customcompliancelogic))
			{
				logic = gr_ctl_mapping.customcompliancelogic.trim();
				return logic;
			}
		}
		return null;
	},

	getAllEvidenceURLId: function(assessment_id, assessment_run_id, evidence_names_array){
		var gr_record = new GlideRecord(this.ccConstScript.TABLES.EVIDENCE_URL);
        gr_record.addQuery('assessmentid', assessment_id);
        gr_record.addQuery('assessmentrunid', assessment_run_id);
		gr_record.addQuery("evidencename", "IN", evidence_names_array);
        gr_record.query();

        while (gr_record.next()){
			evidence_sysids.push(gr_record.sys_id.toString());
		}
		
		return evidence_sysids;
	},
	// getEvidencesForControlObjAndReq: function(control, indicator_template_id) {
		// 	var evidences = [];
		//     var ctl_obj = control.content;
		//     if (ctl_obj != null && ctl_obj.active){
		//         var gr_ctl_mapping = new GlideRecord(this.ccConstScript.TABLES.EVIDENCE_CONTROL_MAPPING); 
		//         gr_ctl_mapping.addQuery('indicatortempateid', indicator_template_id);  
		// 		gr_ctl_mapping.addQuery('sncontrolobjective', ctl_obj.sys_id);  
		//         gr_ctl_mapping.query();
		//         while (gr_ctl_mapping.next()){
		//             evidences.push({
		//                 primaryevidence : gr_ctl_mapping.primaryevidencename,
		//                 supportingevidences : this.getAllSupportingEvidences(gr_ctl_mapping.supportingevidences)
		//              });
		//             if (gs.nil(gr_ctl_mapping.sncontrolobjrequirement.trim()))
		//                 break;   //only one row
		//         }
		//         gr_ctl_mapping = null;
		//     }
		// 	return evidences;
		// },
    type: 'ComplianceCowIndicatorHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-25 12:31:54</sys_created_on>
        <sys_id>54529aaa837c161054ba54dfeeaad3ac</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>ComplianceCowIndicatorHelper</sys_name>
        <sys_package display_value="ComplianceCowV1" source="x_1507800_complian">7b1269b4c3d4d6d05f909e1d0501315c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ComplianceCowV1">7b1269b4c3d4d6d05f909e1d0501315c</sys_scope>
        <sys_update_name>sys_script_include_54529aaa837c161054ba54dfeeaad3ac</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-25 23:15:06</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>54529aaa837c161054ba54dfeeaad3ac</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-09-25 12:31:53</sys_created_on>
        <sys_id>f3b21eaa837c161054ba54dfeeaad35f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-09-25 12:31:53</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
